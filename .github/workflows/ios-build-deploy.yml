name: iOS Auto Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'GitHub repository URL'
        required: true
        type: string
      app_name:
        description: 'App name for App Store'
        required: true
        type: string
      bundle_identifier:
        description: 'Bundle identifier (e.g., com.company.app)'
        required: true
        type: string

jobs:
  build-and-deploy:
    runs-on: macos-latest
    
    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repo_url || 'bariamanoj/NewAppSample' }}
        token: ${{ secrets.GH_TOKEN }}
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
    
    - name: Install Fastlane
      run: gem install fastlane

    - name: Setup App Store Connect API Key
      run: |
        echo "üîë Setting up App Store Connect API Key"
        mkdir -p ~/.appstoreconnect/private_keys
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8
        
    - name: Generate Certificates with Fastlane
      run: |
        echo "üîê Generating certificates with Fastlane"
        
        mkdir -p fastlane
        cat > fastlane/Fastfile << 'EOF'
        default_platform(:ios)

        platform :ios do
          desc "Generate certificates and build"
          lane :build_and_sign do
            # Setup API Key authentication
            app_store_connect_api_key(
              key_id: ENV["API_KEY_ID"],
              issuer_id: ENV["API_ISSUER_ID"],
              key_filepath: "~/.appstoreconnect/private_keys/AuthKey_#{ENV["API_KEY_ID"]}.p8"
            )
            
            # Generate distribution certificate
            cert(
              development: false,
              username: "dohrasanket@gmail.com",
              team_id: "42FLQUC3A9"
            )
            
            # Generate provisioning profile
            sigh(
              app_identifier: "com.san.mainAp",
              username: "dohrasanket@gmail.com",
              team_id: "42FLQUC3A9"
            )
            
            # Build and sign
            gym(
              configuration: "Release",
              export_method: "app-store",
              export_options: {
                method: "app-store",
                teamID: "42FLQUC3A9",
                uploadBitcode: false,
                uploadSymbols: true,
                signingStyle: "manual",
                provisioningProfiles: {
                  "com.san.mainAp" => "com.san.mainAp AppStore"
                }
              },
              output_directory: "./build/ipa",
              output_name: "NewAppSample1.ipa"
            )
          end
        end
        EOF
        
        fastlane build_and_sign
        
      env:
        API_KEY_ID: ${{ secrets.API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.API_ISSUER_ID }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: "xzwz-wtfs-wptw-bhhe"

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-${{ github.event.inputs.app_name || 'NewAppSample1' }}
        path: build/
        if-no-files-found: warn

    - name: Upload to TestFlight
      run: |
        echo "üöÄ Uploading to TestFlight"
        
        IPA_FILE=$(find build/ipa -name "*.ipa" | head -1)
        
        if [ -n "$IPA_FILE" ]; then
          echo "üì± Found IPA: $IPA_FILE"
          
          fastlane run upload_to_testflight \
            ipa:"$IPA_FILE" \
            api_key_path:"~/.appstoreconnect/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8" \
            skip_waiting_for_build_processing:true
            
          echo "‚úÖ Upload completed!"
        else
          echo "‚ö†Ô∏è No IPA found to upload"
        fi
      env:
        API_KEY_ID: ${{ secrets.API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.API_ISSUER_ID }}
